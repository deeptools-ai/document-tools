# coding=utf-8
#
# Copyright The deeptools.ai team.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from typing import Any, List

import numpy as np
import pandas as pd
import pytest
from datasets import DatasetDict, load_dataset

from document_tools import TARGET_MODELS, tokenize_dataset


@pytest.fixture
def incorrect_dataset_format():
    """Return a list of incorrect dataset formats."""
    return [
        "1, 2, 3, 4, 5",
        (1, 2, 3, 4, 5),
        [1, 2, 3, 4, 5],
        np.array([1, 2, 3, 4, 5]),
        {"train": 1, "valid": 2, "test": 3},
        pd.DataFrame.from_dict({"train": [1, 2, 3], "valid": [1, 2, 3], "test": [1, 2, 3]}),
    ]


@pytest.fixture
def dataset_for_testing():
    """Return a dataset for testing."""
    dataset = load_dataset("deeptools-ai/test-document-invoice", download_mode='force_redownload')
    dataset = dataset["train"].select(range(2))
    return dataset


def test_incorrect_dataset_format(incorrect_dataset_format: List[Any]):
    """Test that the function raises an error when the dataset is not in the correct format."""
    for dataset in incorrect_dataset_format:
        with pytest.raises(TypeError):
            tokenize_dataset(dataset, target_model="layoutlmv2")


def test_correct_dataset_format(dataset_for_testing: DatasetDict):
    """Test that the function accepts the correct dataset format."""
    tokenize_dataset(dataset_for_testing, target_model="layoutlmv2")


def test_correct_dataset_dict_format(dataset_for_testing: DatasetDict):
    """Test that the function accepts the correct dataset format."""
    dataset_dict = DatasetDict()
    dataset_dict["train"] = dataset_for_testing
    tokenize_dataset(dataset_dict, target_model="layoutlmv2")


def test_target_models(dataset_for_testing: DatasetDict):
    """Test that the function accepts the correct target model."""
    tokenize_dataset(dataset_for_testing, target_model="layoutlmv2")


def test_incorrect_target_models(dataset_for_testing: DatasetDict):
    """Test that the function raises an error when the target model is not available."""
    model = "layoutlmv2"
    model = model[::-1]
    with pytest.raises(KeyError):
        tokenize_dataset(dataset_for_testing, target_model=model)


def test_save_method_without_path(dataset_for_testing: DatasetDict):
    """Test that the function raises an error when the save_to_disk is True and the save_path is not provided."""
    with pytest.raises(ValueError):
        tokenize_dataset(dataset_for_testing, target_model="layoutlmv2", save_to_disk=True)


def test_save_method_is_false_with_path(caplog, dataset_for_testing: DatasetDict):
    """Test that the function raises an error when the save_to_disk is False and the save_path is provided."""
    tokenize_dataset(dataset_for_testing, target_model="layoutlmv2", save_to_disk=False, save_path="/home/code")
    assert caplog.records[0].levelname == "WARNING"
    assert (
        """
            You have indicated a path to save the dataset, but have chosen not to save it to disk. You need to add
            `save_to_disk=True` to the call to `tokenize_dataset` to save the dataset to disk.
        """
        in caplog.text
    )


def test_log_if_save_to_disk_is_true(caplog, dataset_for_testing: DatasetDict):
    """Test that the function logs if the save_to_disk is True."""
    tokenize_dataset(dataset_for_testing, target_model="layoutlmv2", save_to_disk=True, save_path="/home/code")
    assert caplog.records[0].levelname == "ERROR"


def test_target_models_metadata():
    """Test that the function returns the correct metadata for the target models."""
    assert len(list(TARGET_MODELS.keys())) == 3
    assert list(TARGET_MODELS.keys()) == ["layoutlmv2", "layoutlmv3", "layoutxlm"]
    assert TARGET_MODELS["layoutlmv2"].__name__ == "LayoutLMv2Encoder"
    assert TARGET_MODELS["layoutlmv3"].__name__ == "LayoutLMv3Encoder"
    assert TARGET_MODELS["layoutxlm"].__name__ == "LayoutXLMEncoder"


def test_without_target_model(dataset_for_testing: DatasetDict):
    """Test that the function raises an error when the target model is not provided."""
    with pytest.raises(ValueError):
        tokenize_dataset(dataset_for_testing)


def test_target_model_is_a_string(dataset_for_testing: DatasetDict):
    """Test that the function raises an error when the target model is not a string."""
    with pytest.raises(KeyError):
        tokenize_dataset(dataset_for_testing, target_model=1)  # type: ignore


def test_layout_lmv2(dataset_for_testing: DatasetDict):
    """Test that the function returns the correct metadata for the target models."""
    tmp = tokenize_dataset(dataset_for_testing, target_model="layoutlmv2")
    print(tmp)  # TODO: check that the tokenized dataset is correct


def test_layout_lmv3(dataset_for_testing: DatasetDict):
    """Test that the function returns the correct metadata for the target models."""
    tmp = tokenize_dataset(dataset_for_testing, target_model="layoutlmv3")
    print(tmp)  # TODO: check that the tokenized dataset is correct


def test_layout_xlm(dataset_for_testing: DatasetDict):
    """Test that the function returns the correct metadata for the target models."""
    tmp = tokenize_dataset(dataset_for_testing, target_model="layoutxlm")  # Monkey patching the target model
    assert tmp is not None
    tmp_train = tmp["train"]
    assert len(tmp_train) == 2

    assert type(tmp_train["input_ids"]) is list
    assert tmp_train["input_ids"][0] == [
        0,
        601,
        7,
        738,
        12944,
        9688,
        64163,
        294,
        436,
        28996,
        125149,
        310,
        32616,
        211721,
        7582,
        496,
        4,
        13211,
        15969,
        64163,
        18057,
        1456,
        24480,
        14315,
        8727,
        12,
        1401,
        164,
        30318,
        7,
        4382,
        159,
        5,
        116,
        2208,
        15130,
        204,
        66279,
        87180,
        1342,
        5,
        68388,
        6746,
        384,
        47136,
        6,
        27010,
        9926,
        62,
        17255,
        17,
        159,
        19412,
        22578,
        9926,
        9622,
        6405,
        66458,
        14487,
        106,
        4,
        13211,
        5443,
        510,
        71,
        43581,
        1143,
        206,
        8915,
        6953,
        136,
        14375,
        67967,
        106689,
        1295,
        483,
        108355,
        64,
        16665,
        24189,
        305,
        108355,
        64,
        14773,
        5,
        3650,
        617,
        3117,
        4,
        230282,
        1995,
        30121,
        9926,
        20,
        6,
        224750,
        6,
        173640,
        11107,
        46445,
        647,
        15,
        182512,
        48762,
        19831,
        23498,
        64397,
        16,
        313,
        5,
        647,
        5,
        8455,
        56,
        53026,
        4904,
        2489,
        13023,
        436,
        1456,
        627,
        84161,
        9520,
        4,
        527,
        16444,
        8244,
        8399,
        5,
        6,
        224750,
        60280,
        5,
        8244,
        8399,
        5,
        201,
        3117,
        4,
        230282,
        6,
        58745,
        5742,
        16709,
        115178,
        15128,
        17376,
        12183,
        138573,
        2485,
        17281,
        169,
        636,
        43934,
        2,
    ]
    assert len(tmp_train["input_ids"][0]) == 155
    assert tmp_train["input_ids"][1] == [
        0,
        5881,
        16312,
        51980,
        20048,
        16387,
        333,
        99651,
        143664,
        45227,
        5775,
        13,
        14976,
        947,
        113,
        53,
        14107,
        108527,
        397,
        36,
        257,
        187,
        47,
        429,
        1436,
        9572,
        3232,
        4021,
        180,
        9,
        294,
        1136,
        73,
        17853,
        7680,
        7340,
        8820,
        13,
        159,
        41351,
        75087,
        7,
        8,
        103390,
        238,
        18436,
        5980,
        90,
        159,
        5,
        284,
        5,
        10,
        6,
        123276,
        101,
        6433,
        12665,
        2182,
        72,
        416,
        8077,
        7,
        122035,
        9308,
        4,
        30463,
        12744,
        6849,
        16046,
        132947,
        6300,
        42,
        5,
        12,
        23972,
        21722,
        178829,
        4,
        114669,
        563,
        141,
        42,
        68,
        566,
        49860,
        17223,
        26527,
        23119,
        4435,
        510,
        149163,
        7,
        48798,
        186,
        126329,
        1439,
        1374,
        27107,
        109119,
        162588,
        41027,
        1249,
        19,
        4986,
        211469,
        717,
        365,
        1507,
        12,
        52331,
        5,
        108591,
        138,
        5046,
        2681,
        4,
        204,
        7763,
        603,
        4648,
        19308,
        2839,
        19051,
        68360,
        204,
        397,
        2109,
        71,
        1679,
        4932,
        24639,
        2394,
        1519,
        31,
        5,
        4039,
        4015,
        10,
        418,
        15,
        38274,
        32,
        95048,
        7607,
        125136,
        46231,
        14,
        26404,
        67181,
        1136,
        73,
        661,
        3413,
        4015,
        1819,
        617,
        15,
        38274,
        1511,
        159,
        5757,
        836,
        6,
        109241,
        2795,
        7,
        78292,
        341,
        12883,
        19,
        47921,
        5,
        702,
        1549,
        1374,
        304,
        23837,
        617,
        15,
        571,
        1530,
        95048,
        805,
        21162,
        360,
        13,
        48320,
        50594,
        8678,
        12,
        12280,
        62,
        757,
        4283,
        12988,
        12977,
        496,
        5,
        17223,
        26527,
        171,
        48877,
        186410,
        5,
        9,
        9,
        17234,
        51980,
        12564,
        42,
        6957,
        154337,
        13,
        706,
        706,
        706,
        138,
        619,
        382,
        382,
        20,
        670,
        2740,
        5759,
        13,
        60737,
        2,
    ]
    assert len(tmp_train["input_ids"][1]) == 228

    assert type(tmp_train["attention_mask"]) is list
    assert tmp_train["attention_mask"][0] == [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
    ]
    assert len(tmp_train["attention_mask"][0]) == 155
    assert tmp_train["attention_mask"][1] == [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
    ]
    assert len(tmp_train["attention_mask"][1]) == 228

    assert type(tmp_train["labels"]) is list
    assert tmp_train["labels"][0] == [6]
    assert len(tmp_train["labels"][0]) == 1
    assert tmp_train["labels"][1] == [6]
    assert len(tmp_train["labels"][1]) == 1
